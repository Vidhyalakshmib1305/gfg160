class Solution {
  public:
    // Rabin-Karp Algorithm for substring search
    bool search(const string &pat, const string &txt) {
        int q = 101;          // Prime number for modulus
        int d = 256;          // Number of characters in input alphabet
        int M = pat.size();  
        int N = txt.size();  
        int p = 0;            // Hash value for pattern  
        int t = 0;            // Hash value for text  
        int h = 1;            // Multiplier for the highest order digit in the hash
        
        // Calculate the value of h = pow(d, M-1) % q
        for (int i = 0; i < M - 1; i++)  
            h = (h * d) % q;  
        
        // Calculate initial hash values for pattern and first window of text
        for (int i = 0; i < M; i++) {  
            p = (d * p + pat[i]) % q;  
            t = (d * t + txt[i]) % q;  
        }  
        
        // Slide the pattern over text one by one
        for (int i = 0; i <= N - M; i++) {  
            // Check the hash values of current window of text and pattern
            if (p == t) {  
                // Verify the characters if hashes match
                int j = 0;  
                for (; j < M; j++) {  
                    if (txt[i + j] != pat[j])  
                        break;  
                }  
                // If all characters match, return true
                if (j == M)  
                    return true;  
            }  
            
            // Calculate hash value for next window of text
            if (i < N - M) {  
                t = (d * (t - txt[i] * h) + txt[i + M]) % q;  
                if (t < 0)  
                    t += q;  // Ensure non-negative hash
            }  
        }  
        return false;  
    }

    // Function to check if two strings are rotations of each other
    bool areRotations(string &s1, string &s2) {
        // If sizes are not equal, they cannot be rotations
        if (s1.size() != s2.size())  
            return false;
        
        // Concatenate s1 with itself and search for s2
        string temp = s1 + s1;
        return search(s2, temp);
    }
};
